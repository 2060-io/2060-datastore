
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: {{ .Values.app.name }}
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080
  - name: app-check
    protocol: TCP
    port: 3100
    targetPort: 3100

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.ingress.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: 15m
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ tpl .Values.ingress.host . }}
      secretName: {{ tpl .Values.ingress.tlsSecret . }}
  rules:
    - host: {{ tpl .Values.ingress.host . }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Values.service.name }}
                port:
                  number: 8080
          - path: /(c|u)/.*
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.service.name }}
                 port:
                   number: 3100
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-check-proxy-data-store
  namespace: {{ .Release.Namespace }}
data:
  ENDPOINT_URLS: |
    [
      {
        "pattern": "/c/.*",
        "baseUrl": "http://data-store.{{ .Release.Namespace }}:8080"
      },
      {
        "pattern": "/u/.*",
        "baseUrl": "http://data-store.{{ .Release.Namespace }}:8080"
      }
    ]
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.statefulset.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.app.name }}
spec:
  replicas: {{ .Values.statefulset.replicas }}
  serviceName: {{ .Values.service.name }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      containers:
        - name: {{ .Values.statefulset.container.name }}
          image: io2060/data-store:{{ .Chart.Version }}
          imagePullPolicy: {{ .Values.statefulset.container.pullPolicy }}
          resources:
            requests:
              cpu: {{ .Values.statefulset.container.resources.requests.cpu | quote }}
              memory: {{ .Values.statefulset.container.resources.requests.memory | quote }}
            limits:
              cpu: {{ .Values.statefulset.container.resources.limits.cpu | quote }}
              memory: {{ .Values.statefulset.container.resources.limits.memory | quote }}
          env:
            - name: DEBUG
              value: "{{ .Values.env.DEBUG }}"
            - name: QUARKUS_HTTP_PORT
              value: "{{ .Values.env.QUARKUS_HTTP_PORT }}"
            - name: IO_TWENTYSIXTY_DATASTORE_TMP_DIR
              value: "{{ .Values.env.IO_TWENTYSIXTY_DATASTORE_TMP_DIR }}"
            - name: IO_TWENTYSIXTY_DATASTORE_TMP_LIFETIMEDAYS
              value: "{{ .Values.env.IO_TWENTYSIXTY_DATASTORE_TMP_LIFETIMEDAYS }}"
            - name: IO_TWENTYSIXTY_DATASTORE_REPO_LIFETIMEDAYS
              value: "{{ .Values.env.IO_TWENTYSIXTY_DATASTORE_REPO_LIFETIMEDAYS }}"
            - name: IO_TWENTYSIXTY_DATASTORE_REPO_FS_DIR
              value: "{{ .Values.env.IO_TWENTYSIXTY_DATASTORE_REPO_FS_DIR }}"
            - name: IO_TWENTYSIXTY_DATASTORE_MEDIA_MAXCHUNKS
              value: "{{ .Values.env.IO_TWENTYSIXTY_DATASTORE_MEDIA_MAXCHUNKS }}"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: data-store-wallet-pv-dev
              mountPath: /home/data
        - name: {{ .Values.appCheckProxy.name }}
          image: io2060/app-check-proxy:v1.0.0
          securityContext:
            readOnlyRootFilesystem: false
          imagePullPolicy: {{ .Values.appCheckProxy.pullPolicy }}
          env:
            - name: APP_PORT
              value: "{{ .Values.appCheckProxy.env.APP_PORT }}"
            - name: FIREBASE_CFG_FILE
              value: "{{ .Values.appCheckProxy.env.FIREBASE_CFG_FILE }}"
            - name: ENDPOINT_URLS
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Values.appCheckProxy.configMap.name }}"
                  key: "{{ .Values.appCheckProxy.configMap.key }}"
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: firebase-config-volume
              mountPath: /config
              readOnly: false
      imagePullSecrets:
        - name: registry-credentials
      securityContext:
        fsGroup: 185
      volumes:
        - name: firebase-config-volume
          configMap:
            name: firebase-config
      {{- if .Values.persistence.existingClaim }}
        - name: data-store-wallet-pv-dev
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | quote }}
      {{- end }}
   {{- if and .Values.persistence.storage (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data-store-wallet-pv-dev
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistence.storage | quote }}
  {{- end }}